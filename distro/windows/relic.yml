---
tools:
  # Servers can also invoke a predefined command-line tool to sign packages
  signtool:
    # Template for tool command-line. Variables:
    # - {file} - Path to the file to be signed
    # - {key} - defined in the key section below
    # - {certificate} - defined in the key section below
    command: '"C:\\signtool.exe" sign /f {x509certificate} /ac {cross_sign_root} /csp myprovider /kc {key} {file}'
keys:
  my_tool_key:
    # Which tool, defined above, to use the key with
    tool: mytool
    # Arbitrary string to substitute for {key}
    key: keyname
    # x509 certificate, substituted for {x509certificate} but also fetchable with "relic remote get-key"
    x509certificate: c:/mycert.cer
    # Optional, arbitrary parameters to substitute into the command-line:
    params:
      cross_sign_root: c:/cross_sign_root.cer
    # List of user-roles that are permitted to use this key
    roles: ['somegroup']
server:
  # What port to listen on. Defaults to :6300.
  # Socket activation via systemd is also supported, in which case this is ignored.
  listen: ":6300"
  # Private key for server TLS. PEM format, RSA or ECDSA
  keyfile: "C:/Program Files/relic/server/server.key"
  # X.509 certificate for server TLS. PEM format. If a cert chain is needed it
  # should follow the main cert.
  certfile: "C:/Program Files/relic/server/server.crt"
  # Optional logfile for server errors. If not set, then the Windows event log is used
  #logfile: "C:/Program Files/relic/relic.log"
  # How many MB of scratch space is available for signatures
  maxdiskusage: 1000
  # If true, log all disk reservations
  #debugdiskusage: true
clients:
  # Authentication to the server is via client certificate. Certificates are
  # identified by their fingerprint. Fingerprints can be obtained by using the
  # "relic remote register" command on the client to generate the key, or by
  # checking the server error log after attempting to connect.
  E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855:
    # Display name for this client
    nickname: myuser
    # List of roles this user possesses. Must contain at least one of the roles
    # on a key for the user to access that key.
    roles: ['somegroup']
